<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zm.finance.bussiness.dao.RebateMapper">


	<resultMap type="com.zm.finance.pojo.rebate.RebateDetail" id="rebateDetail">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="order_id" property="orderId" jdbcType="VARCHAR"/>
		<result column="center_id" property="centerId" jdbcType="INTEGER"/>
		<result column="center_rebate_money" property="centerRebateMoney" jdbcType="NUMERIC"/>
		<result column="shop_id" property="shopId" jdbcType="INTEGER"/>
		<result column="shop_rebate_money" property="shopRebateMoney" jdbcType="NUMERIC"/>
		<result column="user_id" property="userId" jdbcType="INTEGER"/>
		<result column="user_rebate_money" property="userRebateMoney" jdbcType="NUMERIC"/>
		<result column="create_time" property="createTime" jdbcType="VARCHAR"/>
		<result column="remark" property="remark" jdbcType="VARCHAR"/>
		<result column="opt" property="opt" jdbcType="VARCHAR"/>
	</resultMap>
	

	<insert id="insertCenterRebate" parameterType="Object">
		insert into center_rebate_count 
		(center_id,can_be_presented,already_presented,stay_to_account,refilling,remark,create_time)
		VALUES
		<foreach collection="list" item="item" separator=",">
			(#{item.centerId},#{item.canBePresented},#{item.alreadyPresented},#{item.stayToAccount},#{item.refilling},#{item.remark},now())
		</foreach>
		ON DUPLICATE KEY UPDATE can_be_presented = values(can_be_presented),already_presented = values(already_presented),
		stay_to_account = values(stay_to_account),refilling = values(refilling),remark = values(remark),update_time = now()
	</insert>
	
	
	<insert id="insertShopRebate" parameterType="Object">
		insert into shop_rebate_count 
		(shop_id,can_be_presented,already_presented,stay_to_account,remark,create_time)
		VALUES
		<foreach collection="list" item="item" separator=",">
			(#{item.shopId},#{item.canBePresented},#{item.alreadyPresented},#{item.stayToAccount},#{item.remark},now())
		</foreach>
		ON DUPLICATE KEY UPDATE can_be_presented =values(can_be_presented),already_presented = values(already_presented),
		stay_to_account = values(stay_to_account),remark = values(remark),update_time = now()
	</insert>
	
	<insert id="insertPushUserRebate" parameterType="Object">
		insert into push_rebate_count 
		(user_id,shop_id,can_be_presented,already_presented,stay_to_account,remark,create_time)
		VALUES
		<foreach collection="list" item="item" separator=",">
			(#{item.userId},#{item.shopId},#{item.canBePresented},#{item.alreadyPresented},#{item.stayToAccount},#{item.remark},now())
		</foreach>
		ON DUPLICATE KEY UPDATE can_be_presented = values(can_be_presented),already_presented = values(already_presented),
		stay_to_account = values(stay_to_account),remark = values(remark),update_time = now()
	</insert>
	
	<insert id="insertRebateDetail" parameterType="Object">
		insert into rebate_detail 
		(order_id,center_id,center_rebate_money,shop_id,shop_rebate_money,user_id,user_rebate_money,remark,create_time)
		VALUES
		<foreach collection="list" item="item" separator=",">
			(#{item.orderId},#{item.centerId},#{item.centerRebateMoney},#{item.shopId},#{item.shopRebateMoney},
			#{item.userId},#{item.userRebateMoney},#{item.remark},now())
		</foreach>
	</insert>
	
	
	<select id="selectRebateDetailById" parameterType="Object" resultMap="rebateDetail">
		select * from rebate_detail where 1=1
		<if test="centerId != null and centerId != ''">
			and center_id = #{centerId}
		</if>
		<if test="shopId != null and shopId != ''">
			and shop_id = #{shopId}
		</if>
		order by create_time desc
	</select>
</mapper>