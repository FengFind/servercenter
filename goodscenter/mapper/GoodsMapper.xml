<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zm.goods.bussiness.dao.GoodsMapper">


	<resultMap type="com.zm.goods.pojo.GoodsItem" id="goodsItem">
		<result column="id" property="id" jdbcType="INTEGER" />
		<result column="goods_id" property="goodsId" jdbcType="VARCHAR" />
		<result column="supplier_id" property="supplierId" jdbcType="INTEGER" />
		<result column="supplier_name" property="supplierName" jdbcType="VARCHAR" />
		<result column="customGoodsName" property="customGoodsName"
			jdbcType="VARCHAR" />
		<result column="status" property="status" jdbcType="INTEGER" />
		<result column="type" property="type" jdbcType="INTEGER" />
		<result column="is_popular" property="popular" jdbcType="INTEGER" />
		<result column="is_hot" property="hot" jdbcType="INTEGER" />
		<result column="is_new" property="fresh" jdbcType="INTEGER" />
		<result column="is_good" property="good" jdbcType="INTEGER" />
		<result column="is_choice" property="choice" jdbcType="INTEGER" />
		<result column="detail_path" property="detailPath" jdbcType="VARCHAR" />
		<result column="third_category" property="thirdCategory" jdbcType="VARCHAR" />
		<result column="second_category" property="secondCategory" jdbcType="VARCHAR" />
		<result column="first_category" property="firstCategory" jdbcType="VARCHAR" />
		<result column="index_status" property="indexStatus" jdbcType="INTEGER" />
		<result column="create_time" property="createTime" jdbcType="VARCHAR" />
		<result column="update_time" property="updateTime" jdbcType="VARCHAR" />
		<result column="opt" property="opt" jdbcType="VARCHAR" />
		<result column="brand_id" property="brandId" jdbcType="VARCHAR" />
		<result column="goods_name" property="goodsName" jdbcType="VARCHAR" />
		<result column="brand" property="brand" jdbcType="VARCHAR" />
		<result column="origin" property="origin" jdbcType="VARCHAR" />
		<result column="tariff" property="tariff" jdbcType="NUMERIC" />
		<result column="increment_tax" property="incrementTax"
			jdbcType="NUMERIC" />
		<result column="hscode" property="hscode" jdbcType="VARCHAR" />
		<result column="encode" property="encode" jdbcType="VARCHAR" />
		<result column="unit" property="unit" jdbcType="VARCHAR" />
	</resultMap>

	<resultMap type="com.zm.goods.pojo.GoodsFile" id="goodsFile">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="goods_id" property="goodsId" jdbcType="VARCHAR" />
		<result column="path" property="path" jdbcType="VARCHAR" />
		<result column="suffix" property="suffix" jdbcType="VARCHAR" />
		<result column="storeType" property="storeType" jdbcType="INTEGER" />
		<result column="type" property="type" jdbcType="INTEGER" />
		<result column="create_time" property="createTime" jdbcType="VARCHAR" />
		<result column="update_time" property="updateTime" jdbcType="VARCHAR" />
		<result column="opt" property="opt" jdbcType="VARCHAR" />
	</resultMap>

	<resultMap type="com.zm.goods.pojo.GoodsSpecs" id="goodsSpecs">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="goods_id" property="goodsId" jdbcType="VARCHAR" />
		<result column="increment_tax" property="incrementTax"
			jdbcType="NUMERIC" />
		<result column="excise_tax" property="exciseTax" jdbcType="NUMERIC" />
		<result column="item_id" property="itemId" jdbcType="VARCHAR" />
		<result column="item_code" property="itemCode" jdbcType="VARCHAR" />
		<result column="sku" property="sku" jdbcType="VARCHAR" />
		<result column="description" property="description" jdbcType="VARCHAR" />
		<result column="specsStatus" property="status" jdbcType="INTEGER" />
		<result column="is_promotion" property="promotion" jdbcType="INTEGER" />
		<result column="weight" property="weight" jdbcType="INTEGER" />
		<result column="discount" property="discount" jdbcType="NUMERIC" />
		<result column="info" property="info" jdbcType="VARCHAR" />
		<result column="qpqty" property="stock" jdbcType="INTEGER" />
		<result column="create_time" property="createTime" jdbcType="VARCHAR" />
		<result column="update_time" property="updateTime" jdbcType="VARCHAR" />
		<result column="opt" property="opt" jdbcType="VARCHAR" />
		<collection property="priceList" ofType="com.zm.goods.pojo.GoodsPrice">
			<id column="price_id" property="id" jdbcType="INTEGER" />
			<result column="item_id" property="itemId" jdbcType="VARCHAR" />
			<result column="min" property="min" jdbcType="INTEGER" />
			<result column="max" property="max" jdbcType="INTEGER" />
			<result column="price" property="price" jdbcType="NUMERIC" />
			<result column="delivery_place" property="deliveryPlace"
				jdbcType="VARCHAR" />
			<result column="vip_price" property="vipPrice" jdbcType="NUMERIC" />
			<result column="sub_create_time" property="createTime"
				jdbcType="VARCHAR" />
			<result column="sub_update_time" property="updateTime"
				jdbcType="VARCHAR" />
			<result column="sub_opt" property="opt" jdbcType="VARCHAR" />
		</collection>
	</resultMap>

	<resultMap type="com.zm.goods.pojo.PriceContrast" id="priceConstrast">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="item_id" property="itemId" jdbcType="VARCHAR" />
		<result column="sh_price" property="sh_price" jdbcType="NUMERIC" />
		<result column="bj_price" property="bj_price" jdbcType="NUMERIC" />
		<result column="price" property="price" jdbcType="NUMERIC" />
		<result column="reserve" property="reserve" jdbcType="NUMERIC" />
		<result column="contrast_time" property="contrastTime"
			jdbcType="VARCHAR" />
		<result column="create_time" property="createTime" jdbcType="VARCHAR" />
		<result column="update_time" property="updateTime" jdbcType="VARCHAR" />
		<result column="opt" property="opt" jdbcType="VARCHAR" />
	</resultMap>

	<resultMap type="com.zm.goods.pojo.Activity" id="activity">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="type" property="type" jdbcType="INTEGER" />
		<result column="layout_id" property="layoutId" jdbcType="INTEGER" />
		<result column="name" property="name" jdbcType="VARCHAR" />
		<result column="type_status" property="typeStatus" jdbcType="INTEGER" />
		<result column="condition_price" property="conditionPrice"
			jdbcType="NUMERIC" />
		<result column="discount" property="discount" jdbcType="NUMERIC" />
		<result column="status" property="status" jdbcType="INTEGER" />
		<result column="href" property="href" jdbcType="VARCHAR" />
		<result column="picPath" property="picPath" jdbcType="VARCHAR" />
		<result column="attr" property="attr" jdbcType="VARCHAR" />
		<result column="description" property="description" jdbcType="VARCHAR" />
		<result column="start_time" property="startTime" jdbcType="VARCHAR" />
		<result column="end_time" property="endTime" jdbcType="VARCHAR" />
		<result column="opt" property="opt" jdbcType="VARCHAR" />
	</resultMap>
	
	<resultMap type="com.zm.goods.pojo.Layout" id="layout">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="page" property="page" jdbcType="VARCHAR" />
		<result column="code" property="code" jdbcType="VARCHAR" />
		<result column="config" property="config" jdbcType="VARCHAR" />
		<result column="type" property="type" jdbcType="INTEGER" />
		<result column="is_show" property="show" jdbcType="INTEGER" />
		<result column="description" property="description" jdbcType="VARCHAR" />
		<result column="create_time" property="createTime" jdbcType="VARCHAR" />
		<result column="update_time" property="updateTime" jdbcType="VARCHAR" />
		<result column="opt" property="opt" jdbcType="VARCHAR" />
	</resultMap>
	
	<resultMap type="com.zm.goods.pojo.ActivityData" id="activityData">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="activity_id" property="activeId" jdbcType="INTEGER" />
		<result column="href" property="href" jdbcType="VARCHAR" />
		<result column="picPath" property="picPath" jdbcType="VARCHAR" />
		<result column="title" property="title" jdbcType="VARCHAR" />
		<result column="goods_id" property="goodsId" jdbcType="INTEGER" />
		<result column="attr" property="attr" jdbcType="VARCHAR" />
		<result column="create_time" property="createTime" jdbcType="VARCHAR" />
		<result column="update_time" property="updateTime" jdbcType="VARCHAR" />
		<result column="opt" property="opt" jdbcType="VARCHAR" />
	</resultMap>
	
	<resultMap type="com.zm.goods.pojo.PopularizeDict" id="dict">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="layout_id" property="layoutId" jdbcType="INTEGER" />
		<result column="picPath1" property="picPath1" jdbcType="VARCHAR" />
		<result column="picPath2" property="picPath2" jdbcType="VARCHAR" />
		<result column="picPath3" property="picPath3" jdbcType="VARCHAR" />
		<result column="name" property="name" jdbcType="VARCHAR" />
		<result column="href" property="href" jdbcType="VARCHAR" />
		<result column="type" property="type" jdbcType="INTEGER" />
		<result column="enname" property="enname" jdbcType="VARCHAR" />
		<result column="first_category" property="firstCategory" jdbcType="VARCHAR" />
		<result column="description" property="description" jdbcType="VARCHAR" />
		<result column="create_time" property="createTime" jdbcType="VARCHAR" />
		<result column="update_time" property="updateTime" jdbcType="VARCHAR" />
		<result column="opt" property="opt" jdbcType="VARCHAR" />
	</resultMap>
	
	<resultMap type="com.zm.goods.pojo.DictData" id="dictData">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="dictId" property="dictId" jdbcType="INTEGER" />
		<result column="href" property="href" jdbcType="VARCHAR" />
		<result column="picPath" property="picPath" jdbcType="VARCHAR" />
		<result column="title" property="title" jdbcType="VARCHAR" />
		<result column="specs" property="specs" jdbcType="VARCHAR" />
		<result column="goods_id" property="goodsId" jdbcType="INTEGER" />
		<result column="price" property="price" jdbcType="NUMERIC" />
		<result column="description" property="description" jdbcType="VARCHAR" />
		<result column="create_time" property="createTime" jdbcType="VARCHAR" />
		<result column="update_time" property="updateTime" jdbcType="VARCHAR" />
		<result column="opt" property="opt" jdbcType="VARCHAR" />
	</resultMap>
	
	<resultMap type="com.zm.goods.pojo.vo.GoodsIndustryModel" id="goodsIndustry">
		<id column="id" property="firstId" jdbcType="INTEGER" />
		<result column="first_id" property="id" jdbcType="VARCHAR" />
		<result column="industryName" property="industryName" jdbcType="VARCHAR" />
		<collection ofType="com.zm.goods.pojo.vo.GoodsCategoryModel" property="dictList">
			<id column="dictid" property="secondId" jdbcType="INTEGER" />
			<result column="second_id" property="id" jdbcType="VARCHAR" />
			<result column="dictName" property="dictName" jdbcType="VARCHAR" />
			<collection property="entryList" ofType = "com.zm.goods.pojo.vo.GoodsCategoryEnteryModel">
				<id column="entryId" property="thirdId" jdbcType="INTEGER" />
				<result column="third_id" property="id" jdbcType="VARCHAR" />
				<result column="entryName" property="entryName" jdbcType="VARCHAR" />
			</collection>
		</collection>
	</resultMap>
	
	<resultMap type="com.zm.goods.pojo.vo.TimeLimitActive" id="timelimitActive">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="start_time" property="startTime" jdbcType="VARCHAR" />
		<result column="end_time" property="endTime" jdbcType="VARCHAR" />
		<result column="status" property="status" jdbcType="INTEGER" />
		<collection ofType="com.zm.goods.pojo.vo.TimeLimitActiveData" property="dataList">
			<id column="dataId" property="id" jdbcType="INTEGER" />
			<result column="goods_id" property="goodsId" jdbcType="VARCHAR" />
			<result column="goods_name" property="goodsName" jdbcType="VARCHAR" />
			<result column="picPath" property="picPath" jdbcType="VARCHAR" />
			<result column="price" property="price" jdbcType="NUMERIC" />
			<result column="discount" property="discount" jdbcType="NUMERIC" />
		</collection>
	</resultMap>
	
	<resultMap type="com.zm.goods.pojo.Tax" id="tax">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="increment_tax" property="incrementTax" jdbcType="NUMERIC" />
		<result column="excise_tax" property="exciseTax" jdbcType="NUMERIC" />
	</resultMap>
	
	<resultMap type="com.zm.goods.processWarehouse.model.WarehouseModel" id="stockModel">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="item_id" property="itemId" jdbcType="VARCHAR" />
		<result column="fxqty" property="fxqty" jdbcType="INTEGER" />
		<result column="frozenqty" property="frozenqty" jdbcType="INTEGER" />
		<result column="lockedqty" property="lockedqty" jdbcType="INTEGER" />
	</resultMap>
	
	<select id="getTax" parameterType="Object" resultMap="tax">
		select gs.excise_tax,gb.increment_tax from goods_item${centerId} gs left join goods${centerId} gi on 
		gs.goods_id = gi.goods_id left join goods g on gi.goods_id=g.goods_id 
		left join base gb on g.base_id = gb.id where gs.item_id = #{itemId}
	</select>
	
	<select id = "queryGoodsCategory" parameterType="Object" resultMap = "goodsIndustry">
		select gfc.id,gfc.first_id,gfc.name as industryName,gsc.id as dictid,gsc.second_id,gsc.name as dictName,
		gtc.id as entryId,gtc.name as entryName,gtc.third_id  
		from goods_first_category${centerId} gfc left join goods_second_categroy${centerId} gsc on gfc.first_id = gsc.first_id 
		left join goods_third_category${centerId} gtc on gsc.second_id = gtc.second_id order by gfc.id
	</select>

	<select id="getActivity" parameterType="Object" resultMap="activity">
		select * from activity${centerId} where type_status = #{typeStatus} and status =
		1
		<if test="type != null">
			and type = #{type}
		</if>
	</select>
	
	<select id="listGoods" parameterType="Object" resultMap="goodsItem">
		select gi.id,gi.goods_id ,gi.goods_name as customGoodsName, gi.description,
		gi.status,g.supplier_id,g.type,g.supplier_name,
		gb.brand_id,gcb.brand,g.origin,gb.increment_tax,gb.tariff,gb.hscode,gb.encode
		from goods${centerId}
		gi left join goods g on gi.goods_id = g.goods_id left join
		base
		gb on g.base_id = gb.id left join 
		goods_category_brand gcb on gb.brand_id =
		gcb.brand_id  where 1=1 
		<if test="type != null and type != ''">
			g.type = #{type,jdbcType = INTEGER}
		</if>
		<if test="thirdCategory != null and thirdCategory != ''">
			and gb.third_category = #{thirdCategory,jdbcType = VARCHAR}
		</if>
		<if test="firstCategory != null and firstCategory != ''">
			and gb.first_category = #{firstCategory,jdbcType = VARCHAR}
		</if>
		<if test="secondCategory != null and secondCategory != ''">
			and gb.second_category = #{secondCategory,jdbcType = VARCHAR}
		</if>
		<if test="goodsId != null and goodsId != ''">
			and gi.goods_id = #{goodsId, jdbcType = VARCHAR}
		</if>
		<if test="goodsId == null or goodsId == ''">
			limit #{pagination.startRow} , #{pagination.numPerPage}
		</if>
	</select>

	<select id="listGoodsFile" parameterType="Object" resultMap="goodsFile">
		select * from goods_file${centerId} where type = #{type, jdbcType = INTEGER}
		and
		goods_id in
		<foreach collection="list" item="item" open="(" close=")"
			separator=",">
			#{item,jdbcType = VARCHAR}
		</foreach>
	</select>
	
	<select id="listGoodsSpecs" parameterType="Object" resultMap="goodsSpecs">
		select
		gs.id,gs.item_id,gs.goods_id,gi.info,gs.item_code,gi.sku,gs.is_promotion,gs.create_time,gs.update_time,
		gs.opt,gp.id as
		price_id,bgp.min,bgp.max,gp.price,gp.vip_price,gs.discount,gp.create_time
		as sub_create_time,g.status as specsStatus,gs.excise_tax,gi.weight,
		gp.delivery_place,
		<if test="goodsType == 2 or goodsType == 1">
			stock.lockedqty as qpqty,
		</if>
		<if test="goodsType == 0">
			stock.fxqty as qpqty,
		</if>
		gp.update_time as
		sub_update_time,gp.opt as sub_opt from goods_item${centerId} gs left join goods_item gi on gs.item_id = gi.item_id 
		left join goods_price${centerId} gp on
		gs.item_id = gp.item_id left join 
		goods_stock stock
		on gs.item_id =
		stock.item_id left join goods${centerId} g on gs.goods_id=g.goods_id left join goods_price bgp on 
		gp.base_price_id = bgp.id where gs.goods_id in
		<foreach collection="list" item="item" open="(" close=")"
			separator=",">
			#{item,jdbcType = VARCHAR}
		</foreach>
	</select>
	
	<select id="getGoodsSpecs" parameterType="Object" resultMap="goodsSpecs">
		select gs.id,gi.info,gs.item_id,gs.goods_id,
		gs.item_code,gi.sku,gs.is_promotion,gs.create_time,gs.update_time,gs.excise_tax,gi.weight,
		gs.opt,gp.id as
		price_id,bgp.min,bgp.max,gp.price,gp.vip_price,gs.discount,gp.create_time
		as sub_create_time,
		<if test="goodsType == 2 or goodsType == 0">
			stock.lockedqty as qpqty,
		</if>
		<if test="goodsType == 1">
			stock.fxqty as qpqty,
		</if>
		gp.delivery_place,g.status as specsStatus,
		gp.update_time as
		sub_update_time,gp.opt as sub_opt from goods_item${centerId} gs left join goods_item gi on gs.item_id = gi.item_id
		left join goods_price${centerId} gp on
		gs.item_id = gp.item_id left join 
		goods_stock stock
		on gs.item_id =
		stock.item_id left join goods${centerId} g on gs.goods_id = g.goods_id left join goods_price bgp on 
		gp.base_price_id = bgp.id where gs.item_id = #{itemId}
	</select>
	
	<select id="listGoodsSpecsByItemId" parameterType="Object"
		resultMap="goodsSpecs">
		select gs.id,gi.info,gs.item_id,gs.goods_id , gc.status as specsStatus,
		gs.item_code,gi.sku,gs.is_promotion,gs.create_time,gs.update_time,
		gs.opt,gp.id as
		price_id,bgp.min,bgp.max,gp.price,gp.vip_price,gs.discount,gp.create_time
		as sub_create_time, gs.excise_tax,gi.weight,
		gp.delivery_place,gb.increment_tax,
		gp.update_time as
		sub_update_time,gp.opt as sub_opt from goods_item${centerId} gs left join goods_item gi on gs.item_id = gi.item_id
		left join goods_price${centerId} gp on
		gs.item_id = gp.item_id left join goods g on gs.goods_id=g.goods_id 
		left join base gb on g.base_id = gb.id left join goods${centerId} gc on g.goods_id=gc.goods_id 
		left join goods_price bgp on 
		gp.base_price_id = bgp.id where gs.item_id in
		<foreach collection="list" item="item" open="(" close=")"
			separator=",">
			#{item,jdbcType = VARCHAR}
		</foreach>
	</select>
	
	<select id="listPriceContrast" parameterType="Object" resultMap="priceConstrast">
		select * from goods_price_contrast${centerId} where item_id = #{itemId}
		<if test="startTime != null and startTime !=''">
			and contrast_time &gt;= #{startTime}
		</if>
		<if test="endTime != null and endTime != ''">
			and contrast_time &lt;= #{endTime}
		</if>
	</select>

	<!-- 建表语句 -->
	<update id="createGoods" parameterType="java.lang.Integer">

		CREATE TABLE IF NOT EXISTS goods_${centerId} (
		  id int UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'ID',
		  goods_id VARCHAR(50) NOT NULL COMMENT '商品ID',
		  goods_name VARCHAR(100) NOT NULL COMMENT '商品名称',
		  description VARCHAR(450) NULL COMMENT '描述',
		  status tinyint UNSIGNED NOT NULL DEFAULT 0 COMMENT '商品状态0：下架，1：上架',
		  is_popular tinyint UNSIGNED NOT NULL DEFAULT 0 COMMENT '是否特推0：否，1是',
		  is_hot tinyint UNSIGNED NOT NULL DEFAULT 0 COMMENT '是否新品0：否，1是',
		  is_new tinyint UNSIGNED NOT NULL DEFAULT 0 COMMENT '是否新品0：否，1是',
		  is_good tinyint UNSIGNED NOT NULL DEFAULT 0 COMMENT '是否精选0：否，1是',
		  is_choice tinyint UNSIGNED NOT NULL DEFAULT 0 COMMENT '是否渠道商品0：否，1是',
		  is_free_postfee tinyint UNSIGNED NOT NULL DEFAULT 0 COMMENT '是否包邮0：否，1是',
		  detail_path VARCHAR(100) NULL COMMENT '详情地址',
		  index_status tinyint UNSIGNED NOT NULL DEFAULT 0 COMMENT '是否创建lucene0：否，1是',
		  create_time DATETIME NULL COMMENT '创建时间',
		  update_time DATETIME NULL COMMENT '更新时间',
		  opt VARCHAR(20) NULL COMMENT '操作人',
		  PRIMARY KEY (id),
		  UNIQUE INDEX id_UNIQUE (id ASC),
		  UNIQUE INDEX goodsId_UNIQUE (goods_id ASC),
		  INDEX idx_status (status),
		  INDEX idx_is_popular (is_popular),
		  INDEX idx_is_hot (is_hot),
		  INDEX idx_is_new (is_new),
		  INDEX idx_is_good (is_good),
		  INDEX idx_is_choice (is_choice)) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 
		COMMENT = '商品表';
	</update>
		
	<update id="createGoodsFile" parameterType="java.lang.Integer">
		CREATE TABLE IF NOT EXISTS goods_file_${centerId} (
		  id int UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'ID',
		  goods_id VARCHAR(100) NOT NULL COMMENT '商品ID',
		  path VARCHAR(100) NULL COMMENT '文件路径',
		  suffix CHAR(5) NULL COMMENT '后缀',
		  store_type tinyint UNSIGNED NULL COMMENT '存储类型',
		  type tinyint UNSIGNED NULL COMMENT '存储类型',
		  create_time DATETIME NULL COMMENT '创建时间',
		  update_time DATETIME NULL COMMENT '更新时间',
		  opt VARCHAR(20) NULL COMMENT '操作人',
		  PRIMARY KEY (id),
		  UNIQUE INDEX id_UNIQUE (id ASC),
		  INDEX idx_goods_id (goods_id),
		  INDEX idx_suffix (suffix),
		  INDEX idx_store_type (store_type),
		  INDEX idx_type (type)
		  ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 
		COMMENT = '供应商商品文件表';
	</update>
	
	<update id="createFirstCategory" parameterType="java.lang.Integer">
		
		CREATE TABLE IF NOT EXISTS goods_first_category_${centerId}(
		  id int UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'ID',
		  first_id varchar(100) NOT NULL COMMENT '一级分类ID',
		  name VARCHAR(100) NULL COMMENT '一级分类名称',
		  create_time DATETIME NULL COMMENT '创建时间',
		  update_time DATETIME NULL COMMENT '更新时间',
		  opt VARCHAR(20) NULL COMMENT '操作人',
		  PRIMARY KEY (id),
		  UNIQUE INDEX first_id_UNIQUE (first_id ASC),
		  INDEX idx_first_id (first_id)) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 
		COMMENT = '供应商商品一级分类表';
	</update>
		
	<update id="createSecondCategory" parameterType="java.lang.Integer">
		
		CREATE TABLE IF NOT EXISTS goods_second_categroy_${centerId} (
		  id int UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'ID',
		  first_id varchar(100) NOT NULL COMMENT '一级分类ID',
		  second_id varchar(100) NOT NULL COMMENT 'first_id',
		  name VARCHAR(100) NULL COMMENT '二级分类名称',
		  create_time DATETIME NULL COMMENT '创建时间',
		  update_time DATETIME NULL COMMENT '更新时间',
		  opt VARCHAR(20) NULL COMMENT '操作人',
		  PRIMARY KEY (id),
		  UNIQUE INDEX second_id_UNIQUE (second_id ASC),
		  INDEX idx_second_id (second_id),
   		  INDEX goods_second_categroy_first_id (first_id)) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 
		COMMENT = '供应商商品二级分类表';
	</update>
		
	<update id="createThirdCategory" parameterType="java.lang.Integer">
		
		CREATE TABLE IF NOT EXISTS goods_third_category_${centerId} (
		  id int UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'ID',
		  second_id varchar(100) NOT NULL COMMENT 'second_id',
		  third_id varchar(100) NOT NULL COMMENT 'second_id',
		  name VARCHAR(100) NULL COMMENT '三级分类名称',
		  create_time DATETIME NULL COMMENT '创建时间',
		  update_time DATETIME NULL COMMENT '更新时间',
		  opt VARCHAR(20) NULL COMMENT '操作人',
		  PRIMARY KEY (id),
		  INDEX idx_third_id (third_id),
		  UNIQUE INDEX third_id_UNIQUE (third_id ASC),
		  INDEX goods_third_category_second_id (second_id)) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 
		COMMENT = '供应商商品三级分类表';
	</update>
		
	<update id="createGoodsItem" parameterType="java.lang.Integer">
		
		CREATE TABLE IF NOT EXISTS goods_item_${centerId} (
		  id int UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'ID',
		  goods_id VARCHAR(100) NOT NULL COMMENT '商品ID',
		  item_id varchar(50) NOT NULL COMMENT '供销内部商品ID',
		  item_code varchar(50) NOT NULL COMMENT '商家自有编码',
  		  excise_tax DECIMAL(5,2) NULL COMMENT '消费税',
		  is_promotion tinyint UNSIGNED NOT NULL DEFAULT 0 COMMENT '是否促销0：否；1：是',
		  status tinyint UNSIGNED NULL COMMENT '商品状态0：停售，1：在售',
		  discount decimal(10,2) NULL COMMENT '促销折扣',
		  create_time DATETIME NULL COMMENT '创建时间',
		  update_time DATETIME NULL COMMENT '更新时间',
		  opt VARCHAR(20) NULL COMMENT '操作人',
		  PRIMARY KEY (id),
		  INDEX idx_goods_id (goods_id),
		  INDEX idx_item_id (item_id), 
		  INDEX idx_is_promotion (is_promotion)
		  ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 
		COMMENT = '商品规格表';
	</update>
		
	<update id="createGoodsPrice" parameterType="java.lang.Integer">
		
		CREATE TABLE IF NOT EXISTS goods_price_${centerId} (
		  id int UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'ID',
		  base_price_id int UNSIGNED NOT NULL COMMENT '主站后台价格ID',
		  item_id varchar(50) NOT NULL COMMENT '商品ID',
		  price decimal(10,2) NULL DEFAULT 0.0 COMMENT '价格',
		  vip_price decimal(10,2) NULL COMMENT '会员价格',
		  delivery_place varchar(20) NULL COMMENT '发货地',
		  create_time DATETIME NULL COMMENT '创建时间',
		  update_time DATETIME NULL COMMENT '更新时间',
		  opt VARCHAR(20) NULL COMMENT '操作人',
		  PRIMARY KEY (id),
		  INDEX idx_base_price_id (base_price_id),
		  INDEX idx_item_id (item_id)) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 
		COMMENT = '商品价格表';
	</update>
		
	<update id="createLayout" parameterType="java.lang.Integer">
		
		CREATE TABLE IF NOT EXISTS layout_${centerId} (
		  id int UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'ID',
		  page varchar(50) NOT NULL COMMENT '页面名称',
		  code varchar(50) NOT NULL COMMENT '模块ID',
		  type tinyint UNSIGNED NOT NULL COMMENT '类型：0：普通模块；1：活动模块；',
		  is_show tinyint UNSIGNED NULL DEFAULT 0 COMMENT '是否显示 0：否；1：是',
		  page_type tinyint UNSIGNED NOT NULL COMMENT '类型：0：PC；1：手机；', 
		  config varchar(100) NULL COMMENT '模块配置',
		  description VARCHAR(450) NULL COMMENT '描述',
		  create_time DATETIME NULL COMMENT '创建时间',
		  update_time DATETIME NULL COMMENT '更新时间',
		  opt VARCHAR(20) NULL COMMENT '操作人',
		  PRIMARY KEY (id),
		  INDEX idx_code (code),
		  INDEX idx_page_type (page_type),
		  INDEX idx_page (page)) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 
		COMMENT = '布局表';
	</update>
		
	<update id="createPopularizeDict" parameterType="java.lang.Integer">	
		
		CREATE TABLE IF NOT EXISTS popularize_dict_${centerId} (
		  id int UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'ID',
		  layout_id int UNSIGNED NOT NULL COMMENT '布局ID',
		  name VARCHAR(50) NULL COMMENT '名称',
		  href VARCHAR(300) NULL COMMENT '跳转地址',
		  type tinyint UNSIGNED NOT NULL COMMENT '类型：0：新品；1：特推；2：渠道；3精选；4：普通分类',
		  enname VARCHAR(50) NULL COMMENT '英文名称',
		  first_category varchar(100) NULL COMMENT '一级分类id',
		  picPath1 VARCHAR(300) NULL COMMENT '图片地址',
		  picPath2 VARCHAR(300) NULL COMMENT '图片地址',
  		  picPath3 VARCHAR(300) NULL COMMENT '图片地址',
		  description VARCHAR(450) NULL COMMENT '描述',
		  create_time DATETIME NULL COMMENT '创建时间',
		  update_time DATETIME NULL COMMENT '更新时间',
		  opt VARCHAR(20) NULL COMMENT '操作人',
		  PRIMARY KEY (id),
		  UNIQUE INDEX uq_layout_id (layout_id)
		  ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 
		COMMENT = '推广字典';
	</update>
		
	<update id="createPopularizeData" parameterType="java.lang.Integer">	
		
		CREATE TABLE IF NOT EXISTS popularize_data_${centerId} (
		  id int UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'ID',
		  dictId int UNSIGNED NOT NULL COMMENT '字典ID',
		  href VARCHAR(300) NULL COMMENT '跳转地址',
		  picPath VARCHAR(300) NULL COMMENT '图片地址',
		  title VARCHAR(50) NULL COMMENT '名称',
		  specs VARCHAR(50) NULL COMMENT '规格',
		  origin VARCHAR(100) NULL COMMENT '原产国',
		  description VARCHAR(450) NULL COMMENT '描述',
		  price DECIMAL(10,2) NULL COMMENT '商品价格',
		  goodsId  int UNSIGNED NULL COMMENT '商品ID',
		  create_time DATETIME NULL COMMENT '创建时间',
		  update_time DATETIME NULL COMMENT '更新时间',
		  opt VARCHAR(20) NULL COMMENT '操作人',
		  PRIMARY KEY (id),
		  INDEX idx_dictId (dictId)) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 
		COMMENT = '推广数据';
	</update>
		
	<update id="createActivity" parameterType="java.lang.Integer">		
	
		CREATE TABLE IF NOT EXISTS activity_${centerId} (
		  id int UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'ID',
		  layout_id int UNSIGNED NOT NULL COMMENT '布局ID',
		  name VARCHAR(50) NULL COMMENT '活动名称',
		  href VARCHAR(300) NULL COMMENT '跳转地址',
		  type tinyint UNSIGNED NOT NULL COMMENT '类型：0：限时促销；1：满减；2：满打折',
		  type_status tinyint UNSIGNED NULL DEFAULT 0 COMMENT '类型：0：特定区域；1：全场；',
		  condition_price DECIMAL(10,2) NULL COMMENT '满多少条件',
		  discount decimal(10,2) NULL COMMENT '促销折扣',
		  status tinyint UNSIGNED NULL DEFAULT 0 COMMENT '状态0:结束；1：正常',
		  picPath VARCHAR(200) NULL COMMENT '图片地址',
		  attr VARCHAR(50) NULL COMMENT '备用字段',
		  description VARCHAR(450) NULL COMMENT '描述',
		  start_time DATETIME NULL COMMENT '开始时间',
		  end_time DATETIME NULL COMMENT '结束时间',
		  opt VARCHAR(20) NULL COMMENT '操作人',
		  PRIMARY KEY (id),
		  UNIQUE INDEX uq_layout_id (layout_id),
		  INDEX idx_type_status (type_status),
  		  INDEX idx_status (status),
		  INDEX idx_type (type)) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 
		COMMENT = '活动列表';
	</update>
		
	<update id="createActivityData" parameterType="java.lang.Integer">		
		CREATE TABLE IF NOT EXISTS activity_data_${centerId} (
		  id int UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'ID',
		  activity_id int UNSIGNED NOT NULL COMMENT '活动ID',
		  href VARCHAR(300) NULL COMMENT '跳转地址',
		  picPath VARCHAR(300) NULL COMMENT '图片地址',
		  title VARCHAR(50) NULL COMMENT '名称',
		  goods_id VARCHAR(100) NULL COMMENT '商品ID',
		  goods_name VARCHAR(100) NULL COMMENT '商品名称',
		  attr VARCHAR(50) NULL COMMENT '备用字段',
		  create_time DATETIME NULL COMMENT '创建时间',
		  update_time DATETIME NULL COMMENT '更新时间',
		  opt VARCHAR(20) NULL COMMENT '操作人',
		  PRIMARY KEY (id),
		  INDEX idx_goods_id (goods_id),
		  INDEX idx_activity_id (activity_id)) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 
		COMMENT = '活动数据';
	</update>
	
	<update id="createPriceContrast" parameterType="java.lang.Integer">	
		CREATE TABLE IF NOT EXISTS goods_price_contrast_${centerId} (
		  id int UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'ID',
		  item_id varchar(50) NOT NULL COMMENT '内部商品ID',
		  sh_price decimal(10,2) NOT NULL COMMENT '上海价格',
		  bj_price decimal(10,2) NOT NULL COMMENT '北京价格',
		  price decimal(10,2) NOT NULL COMMENT '自己价格',
		  reserve decimal(10,2) NULL COMMENT '备用',
		  contrast_time varchar(15) NOT NULL COMMENT '比较时间',
		  create_time DATETIME NULL COMMENT '创建时间',
		  update_time DATETIME NULL COMMENT '更新时间',
		  opt VARCHAR(20) NULL COMMENT '操作人',
		  PRIMARY KEY (id),
		  INDEX idx_item_id (item_id),
		  UNIQUE INDEX uq_contrast_time (contrast_time,item_id ASC)
		  ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 
		COMMENT = '商品价格对比表';
	
	</update>	

	<!-- 建表语句END -->
	
	<select id="listLayout" parameterType="Object" resultMap="layout">
		select * from layout${centerId} where page = #{page} and page_type = ${pageType} and is_show = 1 
	</select>
	
	<select id="listActiveData" parameterType="Object"  resultMap = "activityData">
		select * from activity_data${centerId} where activity_id = #{activeId} limit 5;
	</select>
	
	<select id="listActivityByLayoutId" parameterType="Object" resultMap="activity">
		select * from activity${centerId} where layout_id = #{layoutId}
	</select>
	
	<select id="getDictByLayoutId" parameterType="Object" resultMap="dict">
		select * from popularize_dict${centerId} where layout_id = #{layoutId}
	</select>
	
	<select id="listDictData" parameterType="Object"  resultMap = "dictData">
		select * from popularize_data${centerId} where dictId = #{dictId}
	</select>
	
	<update id="updateActivitiesStart">
		update activity${centerId} set status = 1 where status = 0 and id = #{activeId}
	</update>
	
	<update id="updateActivitiesEnd">
		update activity${centerId} set status = 2 where status = 1 and id = #{activeId}
	</update>
	
	<select id="listEndActiveId" parameterType="Object" resultType="java.lang.Integer">
		select id from activity${centerId} where status = 3
	</select>
	
	<!-- Lucene -->
	<select id="listGoodsForLucene" resultMap="goodsItem" parameterType="Object">
		select gi.id, gi.status, gi.goods_id, gi.create_time, gi.goods_name as customGoodsName ,
		gcb.brand ,g.origin, gb.third_category,gb.second_category,gb.first_category
		from goods${centerId} gi left join goods g on gi.goods_id=g.goods_id left join 
		base gb on g.base_id=gb.id left join goods_category_brand gcb on gb.brand_id = gcb.brand_id 
		where gi.index_status = 0;
	</select>
	
	<select id="listSpecsForLucene" resultMap = "goodsSpecs" parameterType="Object">
		select gi.info,gp.id as price_id, gp.price, gs.discount from goods_item${centerId} gs left join
		goods_price${centerId} gp on
		gs.item_id = gp.item_id left join goods_item gi on gs.item_id = gi.item_id where gs.goods_id = #{goodsId}
	</select>
	
	<update id="updateLuceneStatus" parameterType="Object">
		update goods${centerId} set index_status = 1 where index_status = 0;
	</update>
	
	<select id="queryGoodsItem" parameterType="Object" resultMap="goodsItem">
		select gi.id,gi.goods_id ,gi.goods_name as customGoodsName,max(gp.price) as price,
		gi.status,g.supplier_id,i.weight,gi.create_time,g.type,g.supplier_name,
		gb.brand_id,gcb.brand,g.origin,gs.excise_tax,gb.increment_tax,gb.tariff,gb.hscode,gb.encode
		from goods${centerId}
		gi left join goods g on gi.goods_id=g.goods_id left join base gb on g.base_id=gb.id left join 
		goods_category_brand gcb on gb.brand_id =
		gcb.brand_id 
		left join goods_item${centerId} gs on gi.goods_id = gs.goods_id left join goods_item i on gs.item_id=i.item_id 
		left join goods_price${centerId} gp on gs.item_id = gp.item_id where gi.goods_id in
		<foreach item="id" index="index" collection="list" open="("
			separator="," close=")">
			#{id}
		</foreach>
		group by gi.goods_id
		<if test="sortList != null and sortList != ''">
			order by 
			<foreach item="sort" index="index" collection="sortList" open=""
				separator="," close="">
				${sort.sortField} ${sort.sortRule} 
			</foreach>
		</if>
	</select>
	
	<select id="listWarehouse" parameterType="Object" resultMap = "stockModel">
		select * from goods_stock where item_id in
		<foreach item="item" index="index" collection="list" open="("
				separator="," close=")">
				#{item}
		</foreach>
	</select>
	
	<update id="updateStock" parameterType="Object">
		<foreach collection="list" item="item" index="index" open=""
			close=";" separator=";" >
			update goods_stock
			<set>
				<if test="orderFlag == 0">
					fxqty = fxqty - #{item.frozenqty},
				</if>
				<if test="orderFlag == 1 or orderFlag == 2">
					lockedqty = ifnull(lockedqty,0) - #{item.frozenqty},
				</if>
				frozenqty = frozenqty + #{item.frozenqty}
			</set>
			where item_id = #{item.itemId, jdbcType=VARCHAR}
		</foreach>
	</update>
	
	<update id="updateStockBack" parameterType="Object">
		<foreach collection="list" item="item" index="index" open=""
			close="" separator=";">
			update goods_stock
			<set>
				<if test="orderFlag == 0">
					fxqty = ifnull(fxqty,0) + #{item.quantity},
				</if>
				<if test="orderFlag == 1 or orderFlag == 2">
					lockedqty = ifnull(lockedqty,0) + #{item.quantity},
				</if>
				frozenqty = ifnull(frozenqty,0) - #{item.quantity}
			</set>
			where item_id = #{item.itemId}
		</foreach>
	</update>
	
	<select id="listLimitTimeData" parameterType="Object" resultMap="timelimitActive">
		select ac.status,ac.start_time,ac.end_time, acd.goods_id,acd.picPath,acd.goods_name from 
		activity${centerId} ac left join activity_data${centerId} acd on ac.id = acd.activity_id 
		 where ac.status in (0,1) and ac.type = 0
	</select>
	
	<select id="listSpecialGoods" parameterType="Object" resultMap="goodsItem">
		select gi.id,gi.goods_id ,gi.goods_name as customGoodsName,max(gp.price) as price,
		gi.status,g.supplier_id,i.weight,gi.create_time,g.type,g.supplier_name,
		gb.brand_id,gcb.brand,g.origin,gs.excise_tax,gb.increment_tax,gb.tariff,gb.hscode,gb.encode
		from goods${centerId}
		gi left join goods g on gi.goods_id = g.goods_id left join base gb on g.base_id=gb.id left join 
		goods_category_brand gcb on gb.brand_id =
		gcb.brand_id left join goods_item${centerId} gs on gi.goods_id = gs.goods_id left join goods_item i 
		on gs.item_id = i.item_id 
		left join goods_price${centerId} gp on gs.item_id = gp.item_id where 1=1
		<if test="type == 0">
			and gi.is_new = 1
		</if>
		<if test="type == 1">
			and gi.is_popular = 1
		</if>
	</select>
	
	<select id="getGoodsIdByItemId" parameterType="Object" resultType="java.lang.String">
		select goods_id from goods_item where item_id = #{itemId}
	</select>
	
	<update id="updateThirdWarehouseStock" parameterType="Object">
		<foreach collection="list" item="item" index="index" open=""
			close="" separator=";">
			update goods_stock
			<set>
				fxqty = #{item.quantity},
			</set>
			where item_id = #{item.itemId}
		</foreach>
	</update>

</mapper>